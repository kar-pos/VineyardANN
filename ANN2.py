import numpy as np
import numpy.matlib

def ANN2_fun(x1):

  class structtype():
    def __init__(self,**kwargs):
      self.Set(**kwargs)
    def Set(self,**kwargs):
      self.__dict__.update(kwargs)
    def SetAttr(self,lab,val):
      self.__dict__[lab] = val
  x1_step1=structtype()
  y1_step1=structtype()
  x1 = np.expand_dims(x1,axis=1)
  # ===== NEURAL NETWORK CONSTANTS =====
  
  # Input 1
  x1_step1.xoffset = [16],[1.424],[7120],[85],[0.779816513761468]
  x1_step1.gain = [0.333333333333333],[1.64473684210526],[0.000328947368421053],[0.0571428571428571],[4.02593320235756]
  x1_step1.ymin = -1
  
  # Layer 1
  b1 = [-2.1896804091704220596],[-2.5230705945049343164],[1.7377658172255221469],[-1.3263547032153195637],[-0.69450709396188570199],[0.38666901480521587153],[0.12714172033849291399],[0.44623524333284353416],[0.72296243378074320773],[1.1091893470802431931],[-1.6251977498281553469],[1.8084071651313142759],[2.5034831641533616953]
  IW1_1 = [1.1672107802335172089,-0.29538190464209579389,0.65861219199457221585,-2.5222851527622847101,0.31765167365845126124],[1.2992108052888389214,1.2733802163815206576,-0.266366075584764328,-0.12790720631555058118,-1.4377014080365055904],[-1.1299838240471817841,-1.075454651087084601,0.71336806866143220862,-0.45859922905591815612,-1.4092963502640782902],[1.339044079106488816,-0.65225911991419605052,-1.6348213953372146001,0.76092648285056219137,-0.39865230884252933485],[0.57063547047807139379,2.2411743207357708307,1.5684824033153399458,2.6907727770709128912,1.3399407934888025729],[-0.96609682957840048445,0.88050120195372005849,-1.4341970361487836882,-1.0115394481872790333,-0.53186160994349285236],[-0.94047685755771570637,1.932155048316022361,-0.90122304742973990965,0.024886434695959816499,0.50049179729056902932],[0.2613223973097391073,0.49917991849281123651,-2.054128856154794569,-0.58771112304188821707,-1.2319203014622099879],[1.4348125846751380585,-1.4219872010559211351,-1.246747464113929782,0.38318908030602211179,0.7737123315603836593],[1.3911307805701795814,1.4213751605558455626,1.3401683402198043549,1.4093370851021358447,-0.43896667048720405813],[-1.3159286216418797366,1.5961892744054049231,0.72110351178316001164,0.90341393858306251463,-0.0066694754315855635241],[1.9332959992434770591,0.83864843647920250813,-0.53925065232984858987,-0.79658073678997420863,0.91204494209810305083],[2.7061404054670910035,0.77729157642679325146,1.3299726576301702519,0.41041949376685654682,0.95732179584847731935]
  
  # Layer 2
  b2 = [-1.2464248118298879575],[-0.66216403488318431592],[2.2263156772960095431],[0.48002268300259387512],[0.33462139159145909417],[0.84029552911868898857],[0.079077547835018427436],[0.97432324220779831236],[0.11743925265999342888],[0.36543150814413205563],[-1.0306743726918881077],[-1.0133989568003354265],[-0.2032295780953923825]
  LW2_1 = [0.61847817683144457046,0.11043665693551540929,-0.45136206317414007128,-0.55628612873065474975,1.3867982313095057467,0.041587614121651232668,0.17322953456893278035,0.24389490605108138377,-0.31714487318132023042,0.58558862285247736956,0.0063774275521546767639,0.320441006060994793,0.70557286750404291098],[-0.016307401676766777182,-0.20472012749715992608,-0.074377697047730423341,0.086180839789407243101,-0.91059292377927547602,0.77173727811642622854,-0.25363552228358587914,0.75261703597776663521,-0.5961115254233223526,-0.92801173872651443464,-0.1466425539027634839,-0.093651901669667622641,-0.20262486735256232673],[-0.83543284339413281803,-0.43648453391130359602,0.53280994425742655984,-0.60264776573191425335,-0.39744168728836765103,-0.79851531848670986857,-0.58032193684623123442,-0.25833121250524243573,-0.058750876879888620785,1.1890188616885872808,-0.46501849534323519419,-0.28532634347498542216,-0.48363744155072319053],[-0.40050056895253016709,0.4689740454557159155,0.61281256273002882029,0.21428776145490074923,-0.77752666913753021305,-0.34932998309779095258,-0.45812960186093076853,-0.71988296965843190378,0.38572548410171431099,-0.4856756358076023683,0.29464693966468380459,-0.36627444520817903362,0.22176638782957278084],[-0.38049372180883556105,0.41331468267908744174,-0.48488536017911426645,0.32558547765694023646,0.94327607989817474632,-0.38042995427341291803,-0.64222133702964867563,0.58523172427481084945,-0.79122543731530003974,-0.21561265128135720381,0.33890726274122945361,-0.16901577550325538879,0.60618555867268530957],[0.70000425018990286574,0.057677455469321819992,0.20525326631787402243,0.54520463409652297759,-1.1720720376491495784,-0.67558307255498739607,-0.50553261083134837239,-0.5979492463254738599,-0.83697943686583831102,0.30406626852570611819,0.46051912526046029361,-0.38819087616644271099,0.18605910933412087016],[-0.32529115306570977051,0.72783590391133856645,0.017089798818085755183,-0.002554145610631523497,1.0220837592990728027,0.64358928969274242782,-0.35220975536898896374,-0.17090473974545020153,-0.46051016831482238789,0.60930187779470013076,-0.39495804683892860032,0.73925435138967188209,-0.40292588592075134768],[0.76262031441003630405,0.20823993888448918965,-0.83951463736761133827,-0.47997643732386124915,0.18658027824350961743,0.19598374736667223406,-0.1681230657020538477,-0.23830241224414600021,0.16710940745927507778,-0.75439631330670753329,0.62139294090201802057,-0.63577480046257650592,-0.40331431737724104947],[-0.3616832900097383674,0.47146020327236642933,-0.16620170668968214933,-0.47753737558426068155,0.66637828393170928098,0.14240105918975476396,-0.7955772015266081576,-0.61303265620903868438,0.41750466463021040919,0.83260833237640796689,0.15692774683889892939,-0.83134795912050518663,-0.52836143968844184737],[0.70389385749723487606,0.3627564348504619951,-0.41361545603578558916,0.60559321736283788784,-0.60357424757958466621,-0.33787473704724241275,0.57185350853934924231,-0.39145094080126346947,0.77780424519014534912,0.93453076767811660286,-0.31279217663561553753,-0.5003193078936716276,0.12568015495953702154],[-0.35414116846415094608,-0.21632040989741430081,0.39632530774018526198,-0.38314590741881887626,-0.48425009725171874742,0.55527238846672677397,0.81651473220935510966,0.6062226673934806298,-0.0016640840618017077677,0.19950650103935979596,0.8195771449384003926,-0.11913739494826496024,-0.90816095507052940761],[-0.28767294344176252974,0.4725768660880655947,-0.44889599496801269041,0.93860169034532447974,-0.71398754450634671631,0.26610669028207095677,0.31581915851792419225,0.52891215530855839599,0.15304204244193636564,-0.18258969305147482176,0.71154952747644573119,-0.3418693804456755525,-0.0019524682626537997066],[-0.61757468554194316912,-1.0859564664590597438,0.14204645345389355082,0.083843528557767471598,0.68803574601872419247,-0.32186819465450838829,-0.077821638854728716894,0.25719619002693083765,-0.41935398064252166206,-0.19298013766247371081,0.20342877124713545922,-0.71179765492240731906,0.58480308164537764259]
  
  # Layer 3
  b3 = [1.5628462112844923038],[1.0425125969299608997],[0.67655544982408999388],[-0.07832289346386245299],[-0.59437706199132089857],[0.78530882062130524801],[-1.5882883729871450917]
  LW3_2 = [-0.41075097250780295832,-0.34136439806015433929,-0.51070654682102212263,-0.22419671974752453103,0.76643373397491332266,-0.058687185227606332438,0.72908562282279276712,0.045390413353551088693,-0.54119235667962872771,0.29076572097888658819,0.13053802733740713093,0.10826715763447262997,-0.63796807938262845017],[-0.50300135572787507687,0.47396914377501819793,-0.10293433182564165618,0.069784089183935665845,0.46396612638839751508,-0.31877183035057476967,-0.042989834380686584026,0.55007334001319851957,-0.20994154911078682924,-0.040850499013026467243,-0.46724467521402429648,0.76099652857420874152,-0.48459154577343815928],[-0.28737261485411796924,-0.67747442553643766328,0.62992158276191023702,-0.1994856602674464352,-0.48521557625154670967,0.099061692372213683289,0.26735433283051085462,0.46258877068185511039,0.32414049958427815223,0.090924008289418878359,0.37534157773079773746,0.33302231546568417109,-0.60250957403064309137],[0.056714852978438569375,0.56003189185352919566,0.19977042472979497645,-0.16257039904832418231,-0.19908904584382547398,0.38971966308479105701,-0.38606349291393898815,0.08761658160737295642,-0.64178991063925006078,-0.92302459548231174935,0.21831852115284242077,0.35104672731686897835,0.20982665033814443256],[-0.15019158328382051226,0.26112643086828635219,-0.010378505199437086312,0.95168615811846801744,-0.12107575810584327025,0.99948276502309607583,-0.93725149561518028563,0.65136625618331511767,0.040348997166793083846,0.4640305438484710332,0.33185568411337268424,0.0059993642785775170428,0.49777350229287792294],[0.30972988740376294903,0.26247014252202721662,-1.055392840600401172,-0.68510519864409136215,0.40144853267474966962,0.41353041424493064415,0.49407379056682121377,0.22372644924322002136,-0.46717003353556502132,-0.77165962614560479338,-0.80459604863106914951,-0.19942858114180866957,0.50671880624324960873],[-0.70319924482303575175,0.15474365510155538295,0.022538146695073750514,0.47659387819446019652,-0.75409360642980505229,0.71483705188041490874,-0.029264185171247226319,0.22248596656632690927,0.03242810246913196276,-0.47950667981658323669,0.044284099165126517006,0.48656534360061010069,-0.74977254014079774969]
  
  # Layer 4
  b4 = [-0.10761603280353422563],[0.38343269287775016974],[0.22516287012924279809],[-0.45791323857450455526],[0.08999730356956166244],[-0.20041773024254228019],[0.28813355532741380394],[-0.24691284175747524321],[0.33621021094750036529],[-0.31540123434364253363],[-0.33872325494782856703],[0.23866833593923145185],[-0.14779468823695235402],[0.28554608053919033894],[0.067007647162432210086],[-0.68221625543030495198],[-0.59341626941603675682]
  LW4_3 = [-0.19744182117424857736,-0.49633235359988558955,-0.32732616706156814068,0.42001574247982081944,0.41194432804121555725,-1.0415828844498431494,2.0070775616505769356],[-0.26609588050141902427,0.29712387175323101696,-0.70499357396594264369,-0.56073348340614714846,0.55193279485540092111,-1.6481869377837317092,1.0412884085533165024],[-0.44564003185315598232,-0.51175652156328443887,0.66057101154109443275,-0.32813775175987797139,0.64809588541566531816,-1.3181019923483083822,1.1760632993522563972],[2.07408720132818436,0.75292835822255244071,1.3491453137677238416,0.69765944665250922974,0.017885600075690157029,0.34612825190052515234,1.7964716361029791081],[-0.071233665270862084329,0.63063757049760416074,-0.58695921163316744362,-0.32152697880799641084,-0.53260494402462554842,-0.93135912244498886281,0.51442728065227827372],[-0.35828434818092436132,0.90982653019693626728,-0.46724916356802309592,-0.033252507560252927976,-2.145255231284130204,1.4372505966950837042,0.24445525418337690771],[-0.53649128575381599404,0.098826170254787987224,-1.1007248415321357893,-0.36809971598314528141,-1.1787388815116830454,-0.99195894814124907501,0.52486440701382375273],[-0.78235251593680066318,0.41909669608690169884,1.4651534242422905585,0.28715038558245159495,1.3749645399477672392,1.1709232795296944385,-0.64752567974776620296],[-2.025660666181269054,-0.44176401787075525451,0.56456145560166615116,-0.263778645121076738,-0.65606780539847719957,0.53535622816510008981,-1.2804066468828745329],[0.67084889116545243226,1.1912856523471286874,-1.0377450751091161774,0.70066800882064694811,0.21073606011053117038,-0.48720602221759939932,0.048883739515376181672],[-0.81010457277099701123,-0.14824524929940402496,-0.1039899349719196342,0.1891158722266547132,-0.27208264711749402531,1.3249743258853441397,-0.32948451792453614662],[-0.43232791175078183477,0.33534294939702868898,-0.88285238177570923845,-0.61887836804411200387,-2.257289759163208398,1.0368870357531445592,-0.51861294629614340668],[0.47809814730709510044,0.76079531875441452904,0.2668117158812746692,0.19691196646043745977,0.13816445127919768643,-1.1421711913876304578,1.1837531104205534227],[0.47269646374544199707,0.23958571137635958914,0.31913283986085316801,-0.83672713964206035797,0.033198426225665114697,-1.5223090451351171115,1.0760919388320084877],[-0.54115412029534593064,-0.65052757879873690516,0.15697782023939527152,0.49562223044478354028,0.89142410982378583739,-1.2294330152602288564,1.0630568323423867927],[1.2536830330562451774,1.144646501392388549,0.27390137558172344967,0.82205233172661595908,0.43592193125544731469,-0.31399012565415507225,1.0271847408952488045],[0.86605670215898677977,1.0928833495328997838,-0.62236297188766431798,0.67596019588315425786,0.32197203908351240687,-0.40488857578659565029,1.0919710301517357998]
  
  # Output 1
  y1_step1.ymin = -1
  y1_step1.gain = [1.59362549800797],[1.48809523809524],[0.817661488143909],[4.34877147205914],[2.06462269020337],[0.539083557951482],[89.9516566839226],[23.797180433941],[17.4683601125368],[10.8015670381968],[0.7133518219925],[5.65735442286691],[32.4094635937534],[6.80598735468821],[43.7837476917756],[2.04351855810358],[1.98780920920616]
  y1_step1.xoffset = [15.608],[13.965],[39.143],[7.167],[1.3767],[9.09],[0.0346061032627822],[0.911564840171582],[3.00209281077182],[0.308811411129885],[73.5147934272947],[0.681654322606017],[0.874374705],[4.16368907142857],[0.730995525],[4.4199164409375],[5.164690614375]
  
  # ===== SIMULATION ========
  
  # Dimensions
  Q = np.size(x1,1) # samples
  
  # Input 1
  xp1 = mapminmax_apply(x1,x1_step1)
  
  # Layer 1
  a1 = radbas_apply(np.matlib.repmat(b1,1,Q) + np.dot(IW1_1,xp1))
  
  # Layer 2
  a2 = satlins_apply(np.matlib.repmat(b2,1,Q) + np.dot(LW2_1,a1))
  
  # Layer 3
  a3 = radbasn_apply(np.matlib.repmat(b3,1,Q) + np.dot(LW3_2,a2))
  
  # Layer 4
  a4 = np.matlib.repmat(b4,1,Q) + np.dot(LW4_3,a3)
  
  # Output 1
  y1 = mapminmax_reverse(a4,y1_step1)
  y1=y1.flatten('C')
  y1= [arr.tolist() for arr in y1]
  return y1

# ===== MODULE FUNCTIONS ========

# Map Minimum and Maximum Input Processing Function
def mapminmax_apply(x,settings):
  y = x - settings.xoffset
  y = np.multiply(y,settings.gain)
  y = y + settings.ymin
  return y

# Radial Basis Transfer Function
def radbas_apply(n):
  a = np.exp(-(np.multiply(n,n)))
  return a

# Radial Basis, Normalized Transfer Function
def radbasn_apply(n):
  min_abs_n = np.min(abs(n),axis=0)
  a = np.exp(np.multiply(-n,n) + np.multiply(min_abs_n,min_abs_n))
  suma = sum(a,0)
  a = np.divide(a,suma)
  
  return a

# Linear Saturating Symmetric Transfer Function
def satlins_apply(n):
  a = np.maximum(-1,np.minimum(1,n))
  a[np.isnan(n)] = np.NaN
  return a

# Map Minimum and Maximum Output Reverse-Processing Function
def mapminmax_reverse(y,settings):
  x = y - settings.ymin
  x = np.divide(x,settings.gain)
  x = x + settings.xoffset
  return x
